
module HeytingField.Extension.Algebraic where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure

open import Cubical.Data.Sigma

open import Cubical.Algebra.Polynomials.UnivariateList.Base
open import Cubical.Algebra.Polynomials.UnivariateList.Properties

open import HeytingField.Base
open import HeytingField.Properties

open import HeytingField.Polynomials.Base

open import HeytingField.Extension.Base
open import HeytingField.Extension.Morphism

private variable
  ℓ ℓ' ℓ'' ℓ''' : Level

module _ (F : HeytingField ℓ ℓ') (Ext@(E , F→E , F→EIsHom) : FieldExtension F ℓ'' ℓ''') where
  private
    module F = FieldTheory F
    module E = FieldTheory E
    FPoly = Poly F.FCRing
  open PolyMod F.FCRing
  open FieldPoly F
  open Evaluation Ext

  -- An element of E is algebraic if it satisfies some monic polynomial over F
  isAlgebraicEl : ⟨ E ⟩ → Type (ℓ-max ℓ ℓ'')
  isAlgebraicEl x = ∃[ P ∈ FPoly ] isMonic P × isRoot P x

  
